" vim: ft=vim
if &compatible
  set nocompatible
endif
set runtimepath^={{ dein_dir }}/repos/github.com/Shougo/dein.vim

call dein#begin(expand('~/.cache/dein'))

" VIM Functionality
call dein#add('Shougo/dein.vim')
call dein#add('Shougo/deoplete.nvim')
if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif
call dein#add('Shougo/denite.nvim')
call dein#add('ctrlpvim/ctrlp.vim')
call dein#add('bling/vim-airline')
call dein#add('ryanoasis/vim-devicons')
call dein#add('neomake/neomake')
call dein#add('mileszs/ack.vim')

" Languages
call dein#add('Glench/Vim-Jinja2-Syntax')
call dein#add('cespare/vim-toml')
call dein#add('dag/vim-fish')
call dein#add('ekalinin/Dockerfile.vim')
call dein#add('elmcast/elm-vim')
call dein#add('fatih/vim-go')
call dein#add('hashivim/vim-terraform')
call dein#add('othree/html5.vim')
call dein#add('rust-lang/rust.vim')

" Color Schemes
call dein#add('blerins/flatlandia')
call dein#add('blerins/flattown')
call dein#add('flazz/vim-colorschemes')
call dein#add('mhartington/oceanic-next')
call dein#add('scwood/vim-hybrid')
call dein#add('rhysd/vim-color-spring-night')

" Required:
call dein#end()

if dein#check_install()
  call dein#install()
endif

" Required:
filetype plugin indent on

function! RandomColorscheme()
python3 << EOF
  import vim
  import random
  schemes = ['flattown', 'flatlandia', 'OceanicNext']
  vim.command("return %s", random.choice(schemes))
EOF
endfunction

syntax on
let scheme = call RandomColorScheme()
colorscheme scheme

"folding settings
set foldmethod=syntax   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"File type based indentation
filetype plugin indent on
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Set leader to ,
let mapleader = ","

" Setup python3
let g:python_host_prog = '/usr/local/bin/python3'

" disable mouse
set mouse-=a

" Deocomplete
let g:deoplete#enable_at_startup = 1

" Deinite
" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts',
                      \ ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Linters
autocmd! BufWritePost * Neomake
autocmd Filetype ruby set sts=2 sw=2 et

autocmd Filetype yaml set sts=2 sw=2 et
autocmd Filetype json set sts=2 sw=2 et

autocmd Filetype Dockerfile set makeprg="docker -t ". expand('%:h:t') ." build ."
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

" Rust
autocmd BufWritePost *.rs NeomakeProject cargo

" Ignore rust/go specific build stuff
set wildignore+=*/target/*
set backspace=2

if executable('rg')
  let g:ackprg = 'rg --no-heading --vimgrep'
endif

" Run neomake to do linters or whatever
noremap <leader>l :Neomake!<enter>
