" vim: ft=vim
if &compatible
  set nocompatible
endif
set runtimepath^={{ dein_dir }}/repos/github.com/Shougo/dein.vim

call dein#begin(expand('~/.cache/dein'))

" VIM Functionality
call dein#add('Shougo/dein.vim')
call dein#add('Shougo/deoplete.nvim')
if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif
call dein#add('Shougo/denite.nvim')
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')
call dein#add('ctrlpvim/ctrlp.vim')
call dein#add('bling/vim-airline')
call dein#add('ryanoasis/vim-devicons')
call dein#add('neomake/neomake')
call dein#add('wincent/ferret')
call dein#add('tpope/vim-fugitive')
call dein#add('ludovicchabant/vim-lawrencium')
call dein#add('autozimu/LanguageClient-neovim', {'rev': 'next', 'build': 'bash install.sh'})
call dein#add('farseer90718/vim-taskwarrior')

" Languages
call dein#add('Glench/Vim-Jinja2-Syntax')
call dein#add('cespare/vim-toml')
call dein#add('dag/vim-fish')
call dein#add('ekalinin/Dockerfile.vim')
call dein#add('elmcast/elm-vim')
call dein#add('fatih/vim-go')
call dein#add('hashivim/vim-terraform')
call dein#add('othree/html5.vim')
call dein#add('rust-lang/rust.vim')
call dein#add('vlaadbrain/gnuplot.vim')

" Color Schemes
call dein#add('Siphalor/vim-atomified')
call dein#add('Yggdroot/duoduo')
call dein#add('ajmwagar/vim-deus')
call dein#add('arcticicestudio/nord-vim')
call dein#add('blerins/flattown')
call dein#add('chase/focuspoint-vim')
call dein#add('flrnprz/plastic.vim')
call dein#add('lithammer/vim-eighties')
call dein#add('mhartington/oceanic-next')
call dein#add('rhysd/vim-color-spring-night')
call dein#add('sainnhe/edge')
call dein#add('scwood/vim-hybrid')
call dein#add('tjammer/blayu.vim')
call dein#add('wmvanvliet/vim-blackboard')

" Required:
call dein#end()

if dein#check_install()
  call dein#install()
endif

" Required:
filetype plugin indent on

syntax on

function! RandomColorscheme()
python3 << EOF
import vim
import random
schemes = ['flattown',
	'OceanicNext',
	'plastic',
	'spring-night',
	'deus',
	'duoduo',
	'atomified',
	'blayu',
	'focuspoint',
	'edge',
	'eighties',
	'hybrid',
	'nord']
vim.command("colorscheme %s" % random.choice(schemes))
EOF
endfunction

set background=dark
call RandomColorscheme()

"folding settings
set foldmethod=syntax   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"File type based indentation
filetype plugin indent on
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Set leader to ,
let mapleader = ","

" Setup python3
let g:python_host_prog = '{{ python_bin.stdout }}'

" disable mouse on command line
if !has("gui_running") 
  set mouse-=a
end

" Deocomplete
let g:deoplete#enable_at_startup = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Deinite
" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'yaml': ['yaml-language-server', '--stdio'],
    \ 'json': ['json-language-server', '--stdio'],
    \ 'js': ['javascript-typescript-stdio'],
    \ 'ts': ['javascript-typescript-stdio'],
    \ 'python': ['pyls'],
    \ 'ruby': ['solargraph', 'stdio'],
    \ }

let g:LanguageClient_settingsPath = '~/.config/neovim/lsp_settings.json'

" Neomake config
call neomake#configure#automake('w', 750)

" File indentation
autocmd Filetype ruby set sts=2 sw=2 et
autocmd Filetype yaml set sts=2 sw=2 et
autocmd Filetype json set sts=2 sw=2 et

" Auto format
let g:autofmt_autosave = 1

" Ignore rust/go specific build stuff
set wildignore+=*/target/*
set backspace=2

if executable('rg')
  let g:ackprg = 'rg --no-heading --vimgrep'
endif

" Run neomake to do linters or whatever
noremap <leader>l :Neomake<enter>

" Swap between buffers easy
noremap <leader>n :bn<enter>
noremap <leader>p :bp<enter>
