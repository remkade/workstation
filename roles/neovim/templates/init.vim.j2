" vim: ft=vim
if &compatible
	set nocompatible
endif
set runtimepath^={{ dein_dir }}/repos/github.com/Shougo/dein.vim

{% if ansible_system == 'Windows' -%}
" Use Powershell on Windows
set shell=powershell.exe
set shellcmdflag=-NoProfile\ -NoLogo\ -NonInteractive\ -Command
set shellpipe=|
set shellredir=>
{% endif %}

if dein#load_state('~/.cache/dein')
	call dein#begin(expand('~/.cache/dein'))

	" VIM Functionality
	call dein#add('Shougo/dein.vim')
	call dein#add('Shougo/deoplete.nvim')
	if !has('nvim')
	  call dein#add('roxma/nvim-yarp')
	  call dein#add('roxma/vim-hug-neovim-rpc')
	endif
	call dein#add('Shougo/denite.nvim')
	call dein#add('Shougo/neosnippet.vim')
	call dein#add('Shougo/neosnippet-snippets')
	call dein#add('ctrlpvim/ctrlp.vim')
	call dein#add('bling/vim-airline')
	call dein#add('ryanoasis/vim-devicons')
	call dein#add('neomake/neomake')
	call dein#add('wincent/ferret')
	call dein#add('tpope/vim-fugitive')
	call dein#add('ludovicchabant/vim-lawrencium')
	{% if ansible_system == 'Linux' -%}
	call dein#add('farseer90718/vim-taskwarrior')
	{%- endif %}
	" Collection of common configurations for the Nvim LSP client
	call dein#add('neovim/nvim-lspconfig')
	" Extensions to built-in LSP, for example, providing type inlay hints
	call dein#add('tjdevries/lsp_extensions.nvim')
	" Autocompletion framework for built-in LSP
	call dein#add('nvim-lua/completion-nvim')
	" Diagnostic navigation and settings for built-in LSP
	call dein#add('nvim-lua/diagnostic-nvim')

	" Languages
	call dein#add('Glench/Vim-Jinja2-Syntax')
	call dein#add('cespare/vim-toml')
	call dein#add('dag/vim-fish')
	call dein#add('ekalinin/Dockerfile.vim')
	call dein#add('elmcast/elm-vim')
	call dein#add('fatih/vim-go')
	call dein#add('hashivim/vim-terraform')
	call dein#add('othree/html5.vim')
	call dein#add('rust-lang/rust.vim')
	call dein#add('vlaadbrain/gnuplot.vim')
	call dein#add('PProvost/vim-ps1')

	" Color Schemes
	call dein#add('Siphalor/vim-atomified')
	call dein#add('Yggdroot/duoduo')
	call dein#add('ajmwagar/vim-deus')
	call dein#add('arcticicestudio/nord-vim')
	call dein#add('blerins/flattown')
	call dein#add('chase/focuspoint-vim')
	call dein#add('flrnd/candid.vim')
	call dein#add('flrnprz/plastic.vim')
	call dein#add('lithammer/vim-eighties')
	call dein#add('mhartington/oceanic-next')
	call dein#add('rhysd/vim-color-spring-night')
	call dein#add('rhysd/wallaby.vim')
	call dein#add('sainnhe/archived-colors') " Cryslominsa
	call dein#add('sainnhe/edge')
	call dein#add('sainnhe/sonokai')
	call dein#add('sainnhe/vim-color-forest-night')
	call dein#add('scwood/vim-hybrid')
	call dein#add('tjammer/blayu.vim')
	call dein#add('wmvanvliet/vim-blackboard')

	" Required:
	call dein#end()
	call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

" Required:
filetype plugin indent on

syntax on

function! RandomColorscheme()
python3 << EOF
import vim
import random
schemes = [
	'OceanicNext',
	'atomified',
	'blackboard',
	'blayu',
	'candid',
	'cryslominsa',
	'deus',
	'duoduo',
	'edge',
	'eighties',
	'flattown',
	'focuspoint',
        'forest-night',
	'hybrid',
	'nord',
	'plastic',
	'spring-night',
	'sonokai',
	'wallaby'
	]
scheme = random.choice(schemes)
if scheme == 'sonokai':
	variant = random.choice(['shusia','andromeda','atlantis','maia'])
	vim.command("let g:sonokai_style = '%s'" % variant)
	vim.command("let g:airline_theme = 'sonokai'")
vim.command("colorscheme %s" % scheme)
EOF
endfunction

let g:sonokai_enable_italic = 1
let g:sonokai_disable_italic_comment = 1

set background=dark
call RandomColorscheme()

"folding settings
set foldmethod=syntax   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"File type based indentation
filetype plugin indent on
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Set leader to ,
let mapleader = ','

" Setup python3
let g:python_host_prog = '{{ python_bin.stdout }}'

" disable mouse on command line
if !has('gui_running')
  set mouse-=a
end

if has('nvim')
  " Set completeopt to have a better completion experience
  " :help completeopt
  " menuone: popup even when there's only one match
  " noinsert: Do not insert text until a selection is made
  " noselect: Do not select, force user to select one from the menu
  set completeopt=menuone,noinsert,noselect

  " Avoid showing extra messages when using completion
  set shortmess+=c

  " Configure LSP
  " https://github.com/neovim/nvim-lspconfig#rust_analyzer
lua <<EOF
  -- nvim_lsp object
  local nvim_lsp = require'lspconfig'

  -- function to attach completion and diagnostics
  -- when setting up lsp
  local on_attach = function(client)
      require'completion'.on_attach(client)
      require'diagnostic'.on_attach(client)
  end

  -- Enable rust_analyzer
  nvim_lsp.rust_analyzer.setup{ on_attach=on_attach }
  nvim_lsp.cssls.setup{}
  nvim_lsp.bashls.setup{}
  nvim_lsp.yamlls.setup{}
  nvim_lsp.solargraph.setup{}
EOF

  nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
  nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
  nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
endif

" Deocomplete
let g:deoplete#enable_at_startup = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Deinite
" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Required for operations modifying multiple buffers like rename.
set hidden

" Fix for mac
set pyxversion=3

" Disable some vim-go stuff handled by lsp
let g:go_code_completion_enabled = 0
let g:go_fmt_autosave = 0
let g:go_mod_fmt_autosave = 0

" File indentation
autocmd Filetype ruby set sts=2 sw=2 et
autocmd Filetype yaml set sts=2 sw=2 et
autocmd Filetype json set sts=2 sw=2 et
autocmd Filetype js set sts=2 sw=2 et

if has('nvim')
  " Run format on save
  autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
  autocmd BufWritePre *.rs :call LanguageClient#textDocument_formatting_sync()
endif

" Ignore rust/go specific build stuff
set wildignore+=*/target/*,*/node_modules/*,_site,*/__pycache__/,*/venv/*,*/target/*,*/.vim$,\~$,*/.log,*/.aux,*/.cls,*/.aux,*/.bbl,*/.blg,*/.fls,*/.fdb*/,*/.toc,*/.out,*/.glo,*/.log,*/.ist,*/.fdb_latexmk
set backspace=2

if executable('rg')
  let g:ackprg = 'rg --no-heading --vimgrep'
endif

" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
  \ pumvisible() ? "\<C-n>" :
  \ neosnippet#expandable_or_jumpable() ?
  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Denite define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

" Run neomake to do linters or whatever
noremap <leader>l :Neomake<enter>

" Swap between buffers easy
noremap <leader>n :bn<enter>
noremap <leader>p :bp<enter>
