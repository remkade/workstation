" vim: ft=vim
if &compatible
	set nocompatible
endif
set runtimepath^={{ dein_dir }}/repos/github.com/Shougo/dein.vim

{% if ansible_system == 'Windows' -%}
" Use Powershell on Windows
set shell=powershell.exe
set shellcmdflag=-NoProfile\ -NoLogo\ -NonInteractive\ -Command
set shellpipe=|
set shellredir=>
{% endif %}

if dein#load_state('~/.cache/dein')
	call dein#begin(expand('~/.cache/dein'))

	" VIM Functionality
	call dein#add('Shougo/dein.vim')
	call dein#add('Shougo/deoplete.nvim')
	if !has('nvim')
		call dein#add('roxma/nvim-yarp')
		call dein#add('roxma/vim-hug-neovim-rpc')
	endif
	call dein#add('Shougo/denite.nvim')
	call dein#add('Shougo/neosnippet.vim')
	call dein#add('Shougo/neosnippet-snippets')
	call dein#add('ctrlpvim/ctrlp.vim')
        call dein#add('ms-jpq/chadtree', {'rev': 'chad', 'build': 'python3 -m chadtree deps'})
	call dein#add('bling/vim-airline')
	call dein#add('ryanoasis/vim-devicons')
	call dein#add('neomake/neomake')
	call dein#add('wincent/ferret')
	call dein#add('tpope/vim-fugitive')
	call dein#add('ludovicchabant/vim-lawrencium')
	call dein#add('tpope/vim-surround')

	" Collection of common configurations for the Nvim LSP client
	call dein#add('neovim/nvim-lspconfig')
	" Extensions to built-in LSP, for example, providing type inlay hints
	call dein#add('tjdevries/lsp_extensions.nvim')
	" Autocompletion framework for built-in LSP
	call dein#add('nvim-lua/completion-nvim')
	" Diagnostic navigation and settings for built-in LSP
	call dein#add('nvim-lua/diagnostic-nvim')

	" Languages
	call dein#add('Glench/Vim-Jinja2-Syntax')
	call dein#add('PProvost/vim-ps1')
	call dein#add('cespare/vim-toml')
	call dein#add('dag/vim-fish')
	call dein#add('ekalinin/Dockerfile.vim')
	call dein#add('elmcast/elm-vim')
	call dein#add('fatih/vim-go')
	call dein#add('hashivim/vim-terraform')
	call dein#add('othree/html5.vim')
	call dein#add('pedrohdz/vim-yaml-folds')
	call dein#add('rust-lang/rust.vim')
	call dein#add('vlaadbrain/gnuplot.vim')

	" Color Schemes
	call dein#add('Siphalor/vim-atomified')
	call dein#add('Yggdroot/duoduo')
	call dein#add('ajmwagar/vim-deus')
	call dein#add('arcticicestudio/nord-vim')
	call dein#add('blerins/flattown')
	call dein#add('chase/focuspoint-vim')
	call dein#add('flrnd/candid.vim')
	call dein#add('flrnprz/plastic.vim')
	call dein#add('lithammer/vim-eighties')
	call dein#add('mhartington/oceanic-next')
	call dein#add('rhysd/vim-color-spring-night')
	call dein#add('rhysd/wallaby.vim')
	call dein#add('sainnhe/archived-colors') " Cryslominsa
	call dein#add('sainnhe/edge')
	call dein#add('sainnhe/sonokai')
	call dein#add('sainnhe/vim-color-forest-night')
	call dein#add('scwood/vim-hybrid')
	call dein#add('tjammer/blayu.vim')
	call dein#add('wmvanvliet/vim-blackboard')

	" Required:
	call dein#end()
	call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

" Required:
filetype plugin indent on

syntax on

function! RandomColorscheme()
python3 << EOF
import vim
import random
schemes = [
	'OceanicNext',
	'atomified',
	'blackboard',
	'blayu',
	'candid',
	'cryslominsa',
	'deus',
	'duoduo',
	'edge',
	'eighties',
	'flattown',
	'focuspoint',
        'forest-night',
	'hybrid',
	'nord',
	'plastic',
	'spring-night',
	'sonokai',
	'wallaby'
	]
scheme = random.choice(schemes)
if scheme == 'sonokai':
	variant = random.choice(['shusia','andromeda','atlantis','maia'])
	vim.command("let g:sonokai_style = '%s'" % variant)
	vim.command("let g:airline_theme = 'sonokai'")
vim.command("colorscheme %s" % scheme)
EOF
endfunction

let g:sonokai_enable_italic = 1
let g:sonokai_disable_italic_comment = 1

set background=dark
call RandomColorscheme()

"folding settings
set foldmethod=syntax   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

"File type based indentation
filetype plugin indent on
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Set leader to ,
let mapleader = ','

" Setup python3
let g:python_host_prog = '{{ python_bin.stdout }}'

" disable mouse on command line
if !has('gui_running')
  set mouse-=a
end

if has('nvim')
  " Set completeopt to have a better completion experience
  " :help completeopt
  " menuone: popup even when there's only one match
  " noinsert: Do not insert text until a selection is made
  " noselect: Do not select, force user to select one from the menu
  set completeopt=menuone,noinsert,noselect

  " Avoid showing extra messages when using completion
  set shortmess+=c

  " Configure LSP
  " https://github.com/neovim/nvim-lspconfig#rust_analyzer
lua <<EOF
local nvim_lsp = require('lspconfig')
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)

  -- Set some keybinds conditional on server capabilities
  if client.resolved_capabilities.document_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  elseif client.resolved_capabilities.document_range_formatting then
    buf_set_keymap("n", "<space>f", "<cmd>lua vim.lsp.buf.formatting()<CR>", opts)
  end

  -- Set autocommands conditional on server_capabilities
  if client.resolved_capabilities.document_highlight then
    vim.api.nvim_exec([[
      hi LspReferenceRead cterm=bold ctermbg=red guibg=LightYellow
      hi LspReferenceText cterm=bold ctermbg=red guibg=LightYellow
      hi LspReferenceWrite cterm=bold ctermbg=red guibg=LightYellow
      augroup lsp_document_highlight
        autocmd!
        autocmd CursorHold <buffer> lua vim.lsp.buf.document_highlight()
        autocmd CursorMoved <buffer> lua vim.lsp.buf.clear_references()
      augroup END
    ]], false)
  end
end

-- Use a loop to conveniently both setup defined servers 
-- and map buffer local keybindings when the language server attaches
local servers = { "pylsp", "tsserver", "gopls", "cssls", "bashls", "yamlls", "solargraph", "intelephense" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = { debounce_text_changes = 150 }
  }
end

nvim_lsp["rust_analyzer"].setup { 
  on_attach = on_attach,
  settings = {
    ["rust-analyzer"] = {
      checkOnSave = {
        command = 'clippy';
      }
    }
  }
}
EOF
endif

" Deocomplete
let g:deoplete#enable_at_startup = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Deinite
" Ripgrep command on grep source
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Required for operations modifying multiple buffers like rename.
set hidden

" Fix for mac
set pyxversion=3

" Disable some vim-go stuff handled by lsp
let g:go_code_completion_enabled = 0
let g:go_fmt_autosave = 0
let g:go_mod_fmt_autosave = 0

" File indentation
autocmd Filetype ruby set sts=2 sw=2 et
autocmd Filetype yaml set sts=2 sw=2 et
autocmd Filetype json set sts=2 sw=2 et
autocmd Filetype js set sts=2 sw=2 et
autocmd Filetype vim set sts=2 sw=2 et

if has('nvim')
  " Auto-format *.rs (rust) files prior to saving them
  autocmd BufWritePre *.rs lua vim.lsp.buf.formatting_sync(nil, 1000)
  autocmd BufWritePre *.go lua vim.lsp.buf.formatting_sync(nil, 1000)

  set mouse=a
  set termguicolors
endif

" Ignore rust/go specific build stuff
set wildignore+=*/target/*,*/node_modules/*,_site,*/__pycache__/,*/venv/*,*/target/*,*/.vim$,\~$,*/.log,*/.aux,*/.cls,*/.aux,*/.bbl,*/.blg,*/.fls,*/.fdb*/,*/.toc,*/.out,*/.glo,*/.log,*/.ist,*/.fdb_latexmk
set backspace=2

if executable('rg')
  let g:ackprg = 'rg --no-heading --vimgrep'
endif

" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
  \ pumvisible() ? "\<C-n>" :
  \ neosnippet#expandable_or_jumpable() ?
  \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Denite define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

" Run neomake to do linters or whatever
noremap <leader>l :Neomake<enter>

" Swap between buffers easy
noremap <leader>n :bn<enter>
noremap <leader>p :bp<enter>
